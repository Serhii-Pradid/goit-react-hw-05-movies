{"version":3,"file":"static/js/950.57083b9b.chunk.js","mappings":"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","sources":["components/Api.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["\nimport axios from 'axios';\nimport noPhoto from '../Images/nophoto.jpg';\nimport noPoster from '../Images/noposter.jpg';\n\nconst API_KEY = '2913f54037fb6fa761373ffd7bea2e58';\nconst URL = 'https://api.themoviedb.org/3/';\nconst BASE_URL ='https://image.tmdb.org/t/p/w500';\n\n\nexport const fetchTrandingMovies = async() => {\n\n    const response = await axios.get(\n        `${URL}trending/movie/day?api_key=${API_KEY}`\n    );\n    //console.log(response)\n\n    //return response.data;\n    const movies = response.data.results.map(({ id, title }) => {\n        return {\n          id,\n          title,\n          };\n      });\n    \n      return { movies};\n    };\n\n\nexport const fetchDetailsMovies = async(movieId) => {\n\n      const response = await axios.get(\n            `${URL}movie/${movieId}?api_key=${API_KEY}`\n      );\n      \n      const {id, title, poster_path: poster, overview, vote_average, genres, release_date\n      } = response.data;\n\n          return {\n            id,\n            title,\n            poster: poster ? BASE_URL + poster : noPoster,\n            overview,\n            vote: vote_average.toFixed(1),\n            genres: genres.map(genre => genre.name).join(', '),\n            year: release_date.slice(0, 4),\n            };\n        };\n\n\n\nexport const fetchCredits = async(movieId) => {\n\n    const response = await axios.get(\n          `${URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n          );\n\n    const cast = response.data.cast.map(({id, name, profile_path: photo, character}) => {\n            \n        return {\n          id,\n          name,\n          photo: photo ? BASE_URL + photo : noPhoto ,\n          character,\n                };\n                });\n         \n        //console.log(cast)\n        return{cast}\n              }\n\nexport const fetchRewies = async(movieId) => {\n\n          const response = await axios.get(\n                `${URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n                );\n      \n          const rewiesData = response.data.results.map(({id, author, content}) => {\n                  \n              return {\n                id,\n                author,\n                content,\n                  };\n                });\n               \n              //console.log(rewiesData)\n              return{rewiesData}\n                    }\n\nexport const fetchByQuery = async(query) => {\n\n          const response = await axios.get(\n                `${URL}search/movie?api_key=${API_KEY}&query=${query}`\n                  );\n          const queryData = response.data.results.map(({id, title}) => {\n                              \n                return {\n                   id,\n                   title,\n                   };\n                   });\n                           \n                   console.log(queryData)\n                   return{queryData}\n                   }\n\n/*export const fetchByQuery = async(query) => {\n\n      const response = await axios.get(\n            `${URL}search/movie?api_key=${API_KEY}&query=${query}`\n                  );\n                  console.log(response)                                                  \n            return response.data  \n      }*/\n                         \n            ","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieContainer = styled.div`\n  display: flex;\n  padding: 30px;\n  background-color: #6D6D54;\n    box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n`;\n\nexport const MovieData = styled.div`\n  display: flex;\n  gap: 60px;\n  padding: 20px;\n  color: #fff;\n  `;\n\n  export const PosterImage = styled.img`\n  width: 300px;\n  height: auto;\n  `;\n\nexport const Title = styled.h3`\ndisplay: block;\nfont-size: 20px;\nfont-weight: 600px;\nmargin-left: 40px;\nmargin: 30px, 0;\n  text-decoration: none;\n  color: #515133;\n}`;\n\n\n  export const CastRewiesField = styled.ul`\n  display: flex;\n  gap: 60px;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n  padding: 30px;\n  background-color: #6D6D54;\n    box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  `;\n\n  export const CastRewies = styled.li``\n\n  \nexport const CastRewiesLink = styled(NavLink)`\nfont-weight: 600;\nfont-size: 20px;\ncolor: #ffffff66;\nmargin-right: 30px;\ntext-decoration: none;\n\n&.active {\n    color: #ececf1;\n    font-size: 30px;\n    font-weight: 600;\n    transform: scale(1.4);\n  };\n\n  &:hover {\n  color: #515133;\n  };\n`;\n\n\n\n\n","import { useEffect, useState, useRef, Suspense } from \"react\";\nimport { Outlet, useParams, useLocation } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { fetchDetailsMovies } from \"components/Api\";\nimport { \n    CastRewies, \n    CastRewiesField, \n    CastRewiesLink, \n    MovieContainer, \n    MovieData, \n    PosterImage, \n    Title } from \"./MovieDetails.styled\";\n\n\nconst MovieDetails = () => {\n\n    const {movieId} = useParams();\n    const [movieDetails, setMovieDetails] = useState([]);\n    const location = useLocation();\n    const backLinkLocationRes = useRef(location.state?.from ?? '/');\n    \n    const { poster, title, vote, genres, overview, year\n    } = movieDetails ?? {};\n\n   useEffect(() => {\n\n        async function getMovieDetails() {\n\n            try { \n                const detailsMovie = await fetchDetailsMovies(movieId);\n                //console.log(detailsMovie)\n                setMovieDetails(detailsMovie)\n    \n            } catch(error) {\n               console.log(error)\n            }};\n    \n            getMovieDetails();\n            \n\n    }, [movieId])\n\nconsole.log(location)\n\n    return (\n        <div>\n            <Link to={backLinkLocationRes.current}> ‚Üê Go back </Link> \n        <MovieContainer>\n            {movieDetails && (\n                <MovieData>\n                    \n                <PosterImage src={poster} alt={title} />\n                \n                <div>\n                <h1>{title}({year})</h1>\n                <p>User score: {vote}</p>\n                <h2>Overweiw</h2>\n                <p>{overview}</p>\n                <h3>Genres</h3>\n                <p>{genres}</p>\n                </div>\n        </MovieData>\n            )}\n        </MovieContainer>\n\n        <Title> Addition information: </Title>\n        \n        <CastRewiesField>\n            <CastRewies>\n                <CastRewiesLink to='cast'> Cast</CastRewiesLink>\n            </CastRewies>\n\n            <CastRewies>\n                <CastRewiesLink to='rewies'> Rewies </CastRewiesLink>\n            </CastRewies>\n        </CastRewiesField>\n\n        <Suspense fallback={<div>Loading subpage...</div>}>\n            <Outlet/>\n        </Suspense>\n        </div> \n    )\n};\n\nexport default MovieDetails;"],"names":["API_KEY","URL","BASE_URL","fetchTrandingMovies","axios","response","movies","data","results","map","id","title","fetchDetailsMovies","movieId","poster","poster_path","overview","vote_average","genres","release_date","noPoster","vote","toFixed","genre","name","join","year","slice","fetchCredits","cast","photo","profile_path","character","noPhoto","fetchRewies","rewiesData","author","content","fetchByQuery","query","queryData","console","log","MovieContainer","styled","MovieData","PosterImage","Title","CastRewiesField","CastRewies","CastRewiesLink","NavLink","useParams","useState","movieDetails","setMovieDetails","location","useLocation","backLinkLocationRes","useRef","state","from","useEffect","detailsMovie","getMovieDetails","to","current","src","alt","Suspense","fallback"],"sourceRoot":""}